///**发布远程仓库*/
//buildscript {
//    repositories {
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
//    }
//    dependencies {
//        classpath "com.gradle.publish:plugin-publish-plugin:0.12.0"
//    }
//}
//
//
//apply plugin: "com.gradle.plugin-publish"
//apply plugin: 'groovy'
//
//repositories {
//    jcenter()
//}
//
//dependencies {
//    implementation gradleApi()
//    implementation localGroovy() //not needed for Java plugins
//    // other dependencies that your plugin requires
//    implementation 'com.android.tools.build:gradle:3.4.1'
//}
//version = "0.0.3" // 你发布插件的版本号
//group = "com.wxgz.buriedplugin" // 你发布插件的组名
//pluginBundle {
//    website = 'https://github.com/qinhuagui/MyPlugin'
//    vcsUrl = 'https://github.com/qinhuagui/MyPlugin.git'
//    description = 'A plugin to wxgz buried' // 你发布插件的描述
//    tags = ['WXGZ', 'Buried', 'WxgzBuried', 'Plugin'] // 你发布插件的标签
//
//    plugins {
//        greetingsPlugin {
//            id = 'com.wxgz.gradleburied' // 就是刚才定义属性文件时使用的ID
//            displayName = 'WxgzBuriedPlugin'  // 添加依赖时使用的名字
//
//        }
//    }
//}
/**以下是本地发布*/
apply plugin: 'groovy'
apply plugin: 'maven'
dependencies {
    //gradle sdk
    implementation gradleApi()
    //groovy sdk
    implementation localGroovy()
    implementation 'com.android.tools.build:gradle:3.4.1'
}
repositories {
    mavenCentral()
}
//group和version在后面使用自定义插件的时候会用到
 uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = 'com.wxgz.gradleburied'
            pom.artifactId = 'MyPlugin'
            pom.version = '1.0.0'
           repository(url: uri('../repos'))
        }
    }
}

// First, apply the publishing plugin
//plugins {
//    id "com.gradle.plugin-publish" version "0.12.0"
//    id "java-gradle-plugin"
//    // Apply other plugins here, e.g. the kotlin plugin for a plugin written in Kotlin
//    // or the groovy plugin if the plugin uses Groovy
//}
//
//// If your plugin has any external java dependencies, Gradle will attempt to
//// download them from JCenter for anyone using the plugins DSL
//// so you should probably use JCenter for dependency resolution in your own
//// project.
//repositories {
//    jcenter()
//}
//
//// Unless overridden in the pluginBundle config DSL, the project version will
//// be used as your plugin version when publishing
//version = "1.2"
//group = "com.wxgz.buriedplugin"
//
//// Use java-gradle-plugin to generate plugin descriptors and specify plugin ids
//gradlePlugin {
//    plugins {
//        greetingsPlugin {
//            id = 'com.wxgz.pluin'
//            implementationClass = 'com.wxgz.plugin.MyPlugin'
//        }
//    }
//}
//
//// The configuration example below shows the minimum required properties
//// configured to publish your plugin to the plugin portal
//pluginBundle {
//    website = 'http://www.gradle.org/'
//    vcsUrl = 'https://github.com/qinhuagui/MyPlugin.git'
//    description = 'Greetings from here!'
//    tags = ['greetings', 'buried']
//
//    plugins {
//        greetingsPlugin {
//            // id is captured from java-gradle-plugin configuration
//            displayName = 'WxgzBuriedPlugin'
//        }
//    }
//}
